WildBlog - Technical Documentation
-----------------------------------------------------------------------------
1.1 The main purpose
WildBlog has been written to manage the content of the wild-web.eu, specially blog.

1.2 Terms used in this documentation
If the word "system" is not specified or it is not explicitely obvious, then wildblog is that system.

2.1 Language
Wildblog is written in PHP and supports MySQL database. PHP object model is used as much as possible. 

2.2 Files
The main directory contains following important directories: models, controllers, core, cache, libs, templates and config.

Directories model and controllers contains main modules files. Models and controllers will be describe later.

Core contains special files, most important files in the wildblog. 

Cache is used by Smarty template engine and other to store some data to be reused quicker next time.

Libs contains third party files, for example DbObject classes, Smarty template engine, etc.

Templates directory is used by Smarty template engine to define finaly design HTML page structure, separately from the system logic. 

Config contains configuration files of all types.

2.2 Main class division
The only script, which is called directly, is index.php in the main derectory. This is done using the mod_rewrite module - every request (which not stand for existing file) is redirected (inside the server only) to the index.php file. 
In the index.php file is created first PHP object, which process the http request.

2.3 Environment class
This class covers connection to the database, stores the proceeded http request and creates the bridge between wildblog and system's neighbourhood.
This obejct is global.
Environment initialize the Benchmark object, the tool to test the wildblog system.
Then Smarty template engine and all extra Smarty filters are initialized.
All models and controllers are loaded and the Environment object is the interface to use the models and controllers in the future by all entities.

2.4 Request class
The only one object of this class represents the http request. It provides useful functions to work with the request confortable.
This obejct is global.
Handling this object (using other words handling the http request) is made up the respond - the http respond (this should be the redirection message, some "not allowed" responds, or html page in the most cases).

2.5 While the request is processing the controllers are asked to process some data and finaly make up the respond.
Which controllers are called? This is defined in the controllers themselfs. 

2.6 The controllers represent the system logic, while the models represent the data, including data methods.

-------------------
CZ poznamky:
* kazdej formular ma za senou model, ktery definuje jeho polozky a jeho zpracovani
* jmena controlleru a modelu se uvadeji bez "..Controller" a "..Model"
* popsat zpusob vytvareni odkazu a zpracovani url
* akce kontroleru se volaji: a) na zaklade formatu url b) na zaklade volani jinym kontrolerem (v defaultnich akcich se volaji prazdne metody action___AdditionalContent, ktera se ve zdedenych controllerech muze pretezovat)

* zpracovani url: 
  * url ma vzdy jednu akci, ktera bude provedena jako posledni a urcuje sablonu
  * napriklad kalendar na kazde strance bude generovan vzdy (podle regularniho vyrazu)
  * pokud neni zadna posledni akce, pouzije se actionImplicit v Controlleru Implicit
  * definice akce podle url je nasledujici: [hodnotaAtributu] {regularniVyraz} normalniRetezec (nutno uvest spoustu prikladu
  
* pouziti benchmark - na znistovani casovych a pametovych naroku jednotlivych casti aplikace
  * Benchmark::setCheckpoint("text");
